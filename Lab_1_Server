#include <iostream>
#pragma comment(lib, "ws2_32.lib")
#include <winsock2.h>
#include <fstream>
#include<ctime>
#include <string>

#pragma warning (disable: 4996)


#pragma warning (disable: 4996)
#define PATH  "C:\\Users\\Tsimbal.Vladimir\\Лаба_1_Ахеос\\Server\\serverlog"

using namespace std;

ofstream serverlog(PATH);
SOCKET Connections[100];

const char WHO[] = "Tsimbal Nastia, 23 varik,Testing the productivity of the hedgehog";
int Counter = 0;

string getActualTime() {
	time_t seconds = time(NULL);
	tm* timeinfo = localtime(&seconds);
	return asctime(timeinfo);
}


	void ClientHandler(int index) {
		char msg[256];

		while (true) {
			recv(Connections[index], msg, sizeof(msg), NULL);
			string message = msg;
			for (int i = 0; i < Counter; i++) {
				
				if (message == "exit") {
					serverlog << "Client: " << message << " .Time: " << getActualTime() << endl;
					break;
				}
				if (i == index) {
					continue;
				}
				if (message == "Who") {
					send(Connections[index], WHO, sizeof(WHO), NULL);
					serverlog << "Client: " << message << " .Time: " << getActualTime() << endl;
					
				}
				else {
					send(Connections[i], msg, sizeof(msg), NULL);
					serverlog << "Client: " << message << " .Time: " << getActualTime() << endl;
					
				}
				
			}
		}
	}


int main(int argc, char* arhv[]) {
	WSAData wsaData;
	WORD DLLVersion = MAKEWORD(2, 1);
	if (WSAStartup(DLLVersion, &wsaData) != 0) {
		cout << "Error" << endl;
		exit(1);
	}

	SOCKADDR_IN addr;
	int sizeofaddr = sizeof(addr);
	addr.sin_addr.s_addr = inet_addr("127.0.0.1");
	addr.sin_port = (1048); // 1025 + 23
	addr.sin_family = AF_INET;

	SOCKET sListen = socket(AF_INET, SOCK_STREAM, NULL);
	bind(sListen, (SOCKADDR*)&addr, sizeof(addr));
	listen(sListen, SOMAXCONN);

	SOCKET newConnection;
	for (int i = 0; i < 100; i++) {
		newConnection = accept(sListen, (SOCKADDR *)&addr, &sizeofaddr);

		if (newConnection == 0) {
			cout << "Error connecting to server\n";
		}
		else {
			cout << "Client connected\n";
			serverlog << "Client connected.Time: " << getActualTime() << endl;
			Connections[i] = newConnection;
			Counter++;
			CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)ClientHandler, (LPVOID)(i), NULL, NULL);

		}
	}


	
	return 0;
}


